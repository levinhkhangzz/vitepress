#!/usr/bin/env node
import { parseArgs } from 'node:util';

function parseCommand() {
  const { positionals, values } = parseArgs({
    allowPositionals: true,
    options: {
      help: {
        type: "boolean"
      },
      config: {
        type: "string"
      },
      /** Build command */
      "skip-status": {
        type: "boolean"
      },
      /** Sync command */
      package: {
        type: "string"
      },
      "skip-questions": {
        type: "boolean"
      },
      /** Preview command */
      port: {
        type: "string"
      }
    }
  });
  return {
    name: positionals[0],
    options: values
  };
}
function getFormattedTime(start, end) {
  const seconds = (end - start) / 1e3;
  return `${seconds.toFixed(2)}s`;
}

const cli = {
  commands: [
    {
      name: "build",
      description: "Build your dashboard and status to disk.",
      usage: "[...options]",
      options: [
        {
          name: "--skip-status",
          description: "Skip the status build and use the one from disk instead."
        }
      ]
    },
    {
      name: "init",
      description: "Initialize Lunaria in your project.",
      usage: "[...options]"
    },
    {
      name: "preview",
      description: "Preview your built dashboard locally.",
      usage: "[...options]",
      options: [
        {
          name: "--port <number>",
          description: "Specify which port to open the preview server on."
        }
      ]
    },
    {
      name: "sync",
      description: "Sync your config fields based on your project.",
      usage: "[...options]",
      options: [
        {
          name: "--package <package>",
          description: "Skip the package selection and use the specified one instead."
        },
        {
          name: "--skip-questions",
          description: "Confirm all config changes without waiting for prompts."
        }
      ]
    }
  ],
  options: [
    {
      name: "--help",
      description: "Show this help message."
    },
    {
      name: "--config <path>",
      description: "Specify the location of your config file."
    }
  ]
};
async function showHelp(command) {
  const { help } = await import('../chunks/index.mjs');
  help(cli, command);
}
async function main() {
  try {
    const { name, options } = parseCommand();
    if (name && options.help) {
      await showHelp(name);
      return;
    }
    switch (name) {
      case "build":
        const { build } = await import('../chunks/index2.mjs');
        await build(options);
        break;
      case "init":
        const { init } = await import('../chunks/index3.mjs');
        await init(options);
        break;
      case "preview":
        const { preview } = await import('../chunks/index4.mjs');
        await preview(options);
        break;
      case "sync":
        const { sync } = await import('../chunks/index5.mjs');
        await sync(options);
        break;
      default:
        await showHelp();
        break;
    }
  } catch (e) {
    if (e instanceof TypeError && e?.stack?.includes("ERR_PARSE_ARGS"))
      await showHelp();
    else
      throw e;
  }
}
main().catch(console.error);

export { getFormattedTime as g };
