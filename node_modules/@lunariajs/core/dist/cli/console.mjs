import { TextPrompt, SelectPrompt, ConfirmPrompt } from '@clack/core';
export { isCancel } from '@clack/core';
import pc from 'picocolors';

function text(opts) {
  return new TextPrompt({
    validate: opts.validate,
    placeholder: opts.placeholder,
    defaultValue: opts.defaultValue,
    initialValue: opts.initialValue,
    render() {
      const title = `${opts.message}
`;
      const placeholder = opts.placeholder ? pc.inverse(opts.placeholder[0]) + pc.dim(opts.placeholder.slice(1)) : pc.inverse(pc.hidden("_"));
      const value = !this.value ? placeholder : this.valueWithCursor;
      switch (this.state) {
        case "error":
          return `${title.trim()}
  ${value}
  ${pc.yellow(this.error)}
`;
        case "submit":
          return `${title}  ${pc.dim(this.value || opts.placeholder)}`;
        case "cancel":
          return `${title}  ${pc.strikethrough(pc.dim(this.value ?? ""))}${this.value?.trim() ? "\n" : ""}`;
        default:
          return `${title}  ${value}

`;
      }
    }
  }).prompt();
}
function select(opts) {
  const opt = (option, state) => {
    const label = option.label ?? option.value;
    switch (state) {
      case "selected":
        return `${pc.dim(label)}`;
      case "active":
        return `${pc.green(">")} ${label}`;
      case "cancelled":
        return `${pc.strikethrough(pc.dim(label))}`;
      default:
        return `${pc.dim(pc.hidden("__") + label)}`;
    }
  };
  return new SelectPrompt({
    options: opts.options,
    initialValue: opts.initialValue,
    render() {
      const title = `${opts.message}
`;
      const allOptions = this.options.map((option, i) => `${opt(option, i === this.cursor ? "active" : "inactive")}`).join("\n");
      switch (this.state) {
        case "submit":
          return `${title}  ${opt(this.options[this.cursor], "selected")}`;
        case "cancel":
          return `${title}  ${opt(this.options[this.cursor], "cancelled")}
`;
        default: {
          return `${title}    ${allOptions}

`;
        }
      }
    }
  }).prompt();
}
function confirm(opts) {
  const active = "Yes";
  const inactive = "No";
  return new ConfirmPrompt({
    active,
    inactive,
    initialValue: opts.initialValue ?? true,
    render() {
      const title = `${opts.message}
`;
      const value = this.value ? active : inactive;
      switch (this.state) {
        case "submit":
          return `${title} ${pc.dim(value)}`;
        case "cancel":
          return `${title} ${pc.strikethrough(pc.dim(value))}
`;
        default: {
          return `${title} ${this.value ? `${pc.green(">")} ${active}` : `${!this.value ? pc.hidden("__") : ""}${pc.dim(active)}`}
${!this.value ? `${pc.green(">")} ${inactive}` : `${this.value ? pc.hidden("__") : ""}${pc.dim(inactive)}`}

`;
        }
      }
    }
  }).prompt();
}
function error(message) {
  const badge = pc.red("[error]");
  const headline = pc.red(message);
  return `${badge} ${headline}`;
}
function info(message) {
  const badge = pc.cyan("[info]");
  return `${badge} ${message}`;
}
function warn(message) {
  const badge = pc.yellow("[warn]");
  return `${badge} ${message}`;
}
function success(message) {
  return pc.green(`\u2713 ${message}`);
}
function failure(message) {
  return pc.red(`\u2715 ${message}`);
}
function highlight(message) {
  return pc.blue(message);
}
function bold(message) {
  return pc.bold(message);
}
function code(message) {
  return pc.italic(pc.white(message));
}
function build(message) {
  const badge = pc.magenta("[build]");
  return `${badge} ${message}`;
}
function sync(message) {
  const badge = pc.blue("[sync]");
  return `${badge} ${message}`;
}
function init(message) {
  const badge = pc.cyan("[init]");
  return `${badge} ${message}`;
}
function preview(message) {
  const badge = pc.yellow("[preview]");
  return `${badge} ${message}`;
}

export { bold, build, code, confirm, error, failure, highlight, info, init, preview, select, success, sync, text, warn };
