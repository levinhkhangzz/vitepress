import { existsSync, mkdirSync, writeFileSync, readFileSync } from 'node:fs';
import { resolve, join } from 'node:path';
import { loadConfig } from '../config/index.mjs';
import { g as generateDashboard } from '../shared/core.ae13c5eb.mjs';
import { handleShallowRepo } from '../status/git.mjs';
import { getLocalizationStatus } from '../status/index.mjs';
import { build as build$1, highlight, success, bold, error } from '../cli/console.mjs';
import { g as getFormattedTime } from '../cli/index.mjs';
import 'zod-validation-error';
import '../shared/core.492ac407.mjs';
import 'jiti';
import 'ufo';
import 'zod';
import '@clack/core';
import 'picocolors';
import 'node:os';
import 'simple-git';
import 'fast-glob';
import 'micromatch';
import 'path-to-regexp';
import 'ultramatter';
import 'node:util';

async function build(options) {
  const buildStartTime = performance.now();
  const configPath = options.config ?? "./lunaria.config.json";
  const skipStatus = options["skip-status"] ?? false;
  const { userConfig, rendererConfig } = await loadConfig(configPath);
  const outDir = resolve(userConfig.outDir);
  const statusPath = join(outDir, "status.json");
  const dashboardPath = join(outDir, "index.html");
  if (!existsSync(outDir))
    mkdirSync(outDir, { recursive: true });
  console.log(build$1(`Output directory: ${highlight(outDir)}`));
  const gitStartTime = performance.now();
  console.log(build$1("Preparing git repository..."));
  const isShallowRepo = await handleShallowRepo(userConfig);
  const gitEndTime = performance.now();
  console.log(build$1(success(`Completed in ${getFormattedTime(gitStartTime, gitEndTime)}`)));
  const statusStartTime = performance.now();
  console.log(
    build$1(skipStatus ? "Status build skipped, loading previous status..." : "Building status...")
  );
  const status = await getStatus(userConfig, isShallowRepo, skipStatus, statusPath);
  if (!skipStatus)
    writeFileSync(statusPath, JSON.stringify(status, null, 2));
  const statusEndTime = performance.now();
  console.log(build$1(success(`Completed in ${getFormattedTime(statusStartTime, statusEndTime)}`)));
  const dashboardStartTime = performance.now();
  console.log(build$1("Building dashboard..."));
  const dashboard = await generateDashboard(userConfig, rendererConfig, status);
  writeFileSync(dashboardPath, dashboard);
  const dashboardEndTime = performance.now();
  console.log(build$1(success(`Completed in ${getFormattedTime(dashboardStartTime, dashboardEndTime)}`)));
  const buildEndTime = performance.now();
  console.log(build$1(`${bold("Complete!")} Built in ${getFormattedTime(buildStartTime, buildEndTime)}`));
}
async function getStatus(config, isShallowRepo, skip, statusPath) {
  if (skip) {
    try {
      const file = readFileSync(statusPath, "utf-8");
      const status = JSON.parse(file);
      return status;
    } catch (e) {
      console.error(error(`Failed to load local status at ${highlight(statusPath)}
`));
      throw e;
    }
  }
  return await getLocalizationStatus(config, isShallowRepo);
}

export { build };
