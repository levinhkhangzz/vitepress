import { writeFileSync, existsSync, readFileSync } from 'node:fs';
import { resolve } from 'node:path';
import { select, init as init$1, failure, text, confirm, error, highlight, bold } from '../cli/console.mjs';
import { isCancel } from '@clack/core';
import 'picocolors';

async function init(options) {
  const configPath = resolve(options.config ?? "./lunaria.config.json");
  const packageJsonPath = resolve("./package.json");
  const config = {
    $schema: "./node_modules/@lunariajs/core/config.schema.json",
    repository: {}
  };
  const gitHosting = await select({
    message: init$1("What is the git hosting of your repository?"),
    options: [
      {
        value: "github",
        label: "GitHub"
      },
      {
        value: "gitlab",
        label: "GitLab"
      }
    ]
  });
  if (isCancel(gitHosting)) {
    console.log(failure("Operation cancelled."));
    process.exit(0);
  }
  if (gitHosting !== "github")
    config.repository.hosting = gitHosting;
  const repoName = await text({
    message: init$1("What is the unique name of your repository?"),
    placeholder: "Yan-Thomas/lunaria",
    validate(value) {
      if (value.trim().length < 1)
        return "The repository name cannot be empty.";
    }
  });
  if (isCancel(repoName)) {
    console.log(failure("Operation cancelled."));
    process.exit(0);
  }
  config.repository.name = repoName;
  const repoBranch = await text({
    message: init$1("What is the main branch of your repository?"),
    placeholder: "main",
    validate(value) {
      if (value.trim().length < 1)
        return "The branch name cannot be empty.";
    }
  });
  if (isCancel(repoBranch)) {
    console.log(failure("Operation cancelled."));
    process.exit(0);
  }
  if (repoBranch !== "main")
    config.repository.branch = repoBranch;
  const isMonorepo = await confirm({
    message: init$1("Are you setting Lunaria on a monorepo's project?"),
    initialValue: false
  });
  if (isCancel(isMonorepo)) {
    console.log(failure("Operation cancelled."));
    process.exit(0);
  }
  if (isMonorepo) {
    const repoRootDir = await text({
      message: init$1("What is the root directory of your project?"),
      placeholder: "docs",
      validate(value) {
        if (value.trim().length < 1)
          return "The root directory cannot be empty.";
        if (value.trim().startsWith("./") || value.trim().startsWith("../"))
          return "The root directory cannot be a relative path.";
        if (value.trim().endsWith("/"))
          return "The root directory cannot end with a trailing slash.";
      }
    });
    if (isCancel(repoRootDir)) {
      console.log(failure("Operation cancelled."));
      process.exit(0);
    }
    config.repository.rootDir = repoRootDir;
  }
  try {
    const configJson = JSON.stringify(config, null, 2);
    writeFileSync(configPath, configJson);
  } catch {
    console.error(error("Failed to create your Lunaria config."));
  }
  const trySync = await confirm({
    message: init$1("Try syncing the rest of your config based on your project?"),
    initialValue: false
  });
  if (isCancel(trySync)) {
    console.log(failure("Operation cancelled."));
    process.exit(0);
  }
  if (trySync) {
    const { sync } = await import('./index5.mjs');
    await sync({
      config: options.config,
      "skip-questions": false,
      package: void 0
    });
  }
  if (existsSync(packageJsonPath)) {
    try {
      const packageJson = JSON.parse(readFileSync(packageJsonPath, "utf-8"));
      packageJson.scripts = {
        ...packageJson.scripts,
        "lunaria:build": "lunaria build",
        "lunaria:preview": "lunaria preview"
      };
      writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
      console.log(init$1("Added lunaria scripts to your package.json file."));
    } catch {
      console.error(error("Failed to update your package.json's scripts."));
    }
  }
  console.log(init$1(`Config created at: ${highlight(configPath)}`));
  console.log(
    init$1(
      `You're almost done, read your next steps: ${highlight(
        "https://lunaria.dev/getting-started/#next-steps"
      )}`
    )
  );
  console.log(init$1(bold("Complete!")));
}

export { init };
