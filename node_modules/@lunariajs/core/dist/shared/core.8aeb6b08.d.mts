import { z } from 'zod';

declare const OptionalKeysSchema: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>;
declare const FileSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    location: z.ZodString;
    ignore: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    pattern: z.ZodString;
    type: z.ZodLiteral<"universal">;
}, "strip", z.ZodTypeAny, {
    type: "universal";
    location: string;
    ignore: string[];
    pattern: string;
}, {
    type: "universal";
    location: string;
    pattern: string;
    ignore?: string[] | undefined;
}>, z.ZodObject<{
    location: z.ZodString;
    ignore: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    pattern: z.ZodString;
    type: z.ZodLiteral<"dictionary">;
    optionalKeys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    type: "dictionary";
    location: string;
    ignore: string[];
    pattern: string;
    optionalKeys?: Record<string, string[]> | undefined;
}, {
    type: "dictionary";
    location: string;
    pattern: string;
    ignore?: string[] | undefined;
    optionalKeys?: Record<string, string[]> | undefined;
}>]>;
declare const LocaleSchema: z.ZodObject<{
    /** The label of the locale to show in the status dashboard, e.g. `"English"`, `"Português"`, or `"Español"` */
    label: z.ZodString;
    /** The BCP-47 tag of the locale, both to use in smaller widths and to differentiate regional variants, e.g. `"en-US"` (American English) or `"en-GB"` (British English) */
    lang: z.ZodString;
}, "strip", z.ZodTypeAny, {
    lang: string;
    label: string;
}, {
    lang: string;
    label: string;
}>;
declare const LunariaConfigSchema: z.ZodEffects<z.ZodObject<{
    /** The location of your Lunaria JSON schema */
    $schema: z.ZodOptional<z.ZodString>;
    /** Options about your generated dashboard */
    dashboard: z.ZodDefault<z.ZodObject<{
        title: z.ZodDefault<z.ZodString>;
        description: z.ZodDefault<z.ZodString>;
        site: z.ZodOptional<z.ZodString>;
        basesToHide: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        customCss: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodString, "many">>, string[] | undefined, string[] | undefined>;
        favicon: z.ZodEffects<z.ZodOptional<z.ZodObject<{
            external: z.ZodOptional<z.ZodArray<z.ZodObject<{
                link: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: string;
                link: string;
            }, {
                type: string;
                link: string;
            }>, "atleastone">>;
            inline: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
        }, "strip", z.ZodTypeAny, {
            external?: [{
                type: string;
                link: string;
            }, ...{
                type: string;
                link: string;
            }[]] | undefined;
            inline?: string | undefined;
        }, {
            external?: [{
                type: string;
                link: string;
            }, ...{
                type: string;
                link: string;
            }[]] | undefined;
            inline?: string | undefined;
        }>>, {
            external?: [{
                type: string;
                link: string;
            }, ...{
                type: string;
                link: string;
            }[]] | undefined;
            inline?: string | undefined;
        } | undefined, {
            external?: [{
                type: string;
                link: string;
            }, ...{
                type: string;
                link: string;
            }[]] | undefined;
            inline?: string | undefined;
        } | undefined>;
        ui: z.ZodDefault<z.ZodObject<{
            lang: z.ZodDefault<z.ZodString>;
            dir: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"ltr">, z.ZodLiteral<"rtl">]>>;
            'status.done': z.ZodDefault<z.ZodString>;
            'status.outdated': z.ZodDefault<z.ZodString>;
            'status.missing': z.ZodDefault<z.ZodString>;
            'status.emojiDone': z.ZodDefault<z.ZodString>;
            'status.emojiOutdated': z.ZodDefault<z.ZodString>;
            'status.emojiMissing': z.ZodDefault<z.ZodString>;
            'statusByLocale.heading': z.ZodDefault<z.ZodString>;
            'statusByLocale.detailsSummaryFormat': z.ZodDefault<z.ZodString>;
            'statusByLocale.detailsTitleFormat': z.ZodDefault<z.ZodString>;
            'statusByLocale.outdatedLocalizationLink': z.ZodDefault<z.ZodString>;
            'statusByLocale.incompleteLocalizationLink': z.ZodDefault<z.ZodString>;
            'statusByLocale.createFileLink': z.ZodDefault<z.ZodString>;
            'statusByLocale.sourceChangeHistoryLink': z.ZodDefault<z.ZodString>;
            'statusByLocale.missingKeys': z.ZodDefault<z.ZodString>;
            'statusByLocale.completeLocalization': z.ZodDefault<z.ZodString>;
            'statusByFile.heading': z.ZodDefault<z.ZodString>;
            'statusByFile.tableRowFile': z.ZodDefault<z.ZodString>;
            'statusByFile.tableSummaryFormat': z.ZodDefault<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            lang: string;
            dir: "ltr" | "rtl";
            'status.done': string;
            'status.outdated': string;
            'status.missing': string;
            'status.emojiDone': string;
            'status.emojiOutdated': string;
            'status.emojiMissing': string;
            'statusByLocale.heading': string;
            'statusByLocale.detailsSummaryFormat': string;
            'statusByLocale.detailsTitleFormat': string;
            'statusByLocale.outdatedLocalizationLink': string;
            'statusByLocale.incompleteLocalizationLink': string;
            'statusByLocale.createFileLink': string;
            'statusByLocale.sourceChangeHistoryLink': string;
            'statusByLocale.missingKeys': string;
            'statusByLocale.completeLocalization': string;
            'statusByFile.heading': string;
            'statusByFile.tableRowFile': string;
            'statusByFile.tableSummaryFormat': string;
        }, {
            lang?: string | undefined;
            dir?: "ltr" | "rtl" | undefined;
            'status.done'?: string | undefined;
            'status.outdated'?: string | undefined;
            'status.missing'?: string | undefined;
            'status.emojiDone'?: string | undefined;
            'status.emojiOutdated'?: string | undefined;
            'status.emojiMissing'?: string | undefined;
            'statusByLocale.heading'?: string | undefined;
            'statusByLocale.detailsSummaryFormat'?: string | undefined;
            'statusByLocale.detailsTitleFormat'?: string | undefined;
            'statusByLocale.outdatedLocalizationLink'?: string | undefined;
            'statusByLocale.incompleteLocalizationLink'?: string | undefined;
            'statusByLocale.createFileLink'?: string | undefined;
            'statusByLocale.sourceChangeHistoryLink'?: string | undefined;
            'statusByLocale.missingKeys'?: string | undefined;
            'statusByLocale.completeLocalization'?: string | undefined;
            'statusByFile.heading'?: string | undefined;
            'statusByFile.tableRowFile'?: string | undefined;
            'statusByFile.tableSummaryFormat'?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        description: string;
        ui: {
            lang: string;
            dir: "ltr" | "rtl";
            'status.done': string;
            'status.outdated': string;
            'status.missing': string;
            'status.emojiDone': string;
            'status.emojiOutdated': string;
            'status.emojiMissing': string;
            'statusByLocale.heading': string;
            'statusByLocale.detailsSummaryFormat': string;
            'statusByLocale.detailsTitleFormat': string;
            'statusByLocale.outdatedLocalizationLink': string;
            'statusByLocale.incompleteLocalizationLink': string;
            'statusByLocale.createFileLink': string;
            'statusByLocale.sourceChangeHistoryLink': string;
            'statusByLocale.missingKeys': string;
            'statusByLocale.completeLocalization': string;
            'statusByFile.heading': string;
            'statusByFile.tableRowFile': string;
            'statusByFile.tableSummaryFormat': string;
        };
        site?: string | undefined;
        basesToHide?: string[] | undefined;
        customCss?: string[] | undefined;
        favicon?: {
            external?: [{
                type: string;
                link: string;
            }, ...{
                type: string;
                link: string;
            }[]] | undefined;
            inline?: string | undefined;
        } | undefined;
    }, {
        title?: string | undefined;
        description?: string | undefined;
        site?: string | undefined;
        basesToHide?: string[] | undefined;
        customCss?: string[] | undefined;
        favicon?: {
            external?: [{
                type: string;
                link: string;
            }, ...{
                type: string;
                link: string;
            }[]] | undefined;
            inline?: string | undefined;
        } | undefined;
        ui?: {
            lang?: string | undefined;
            dir?: "ltr" | "rtl" | undefined;
            'status.done'?: string | undefined;
            'status.outdated'?: string | undefined;
            'status.missing'?: string | undefined;
            'status.emojiDone'?: string | undefined;
            'status.emojiOutdated'?: string | undefined;
            'status.emojiMissing'?: string | undefined;
            'statusByLocale.heading'?: string | undefined;
            'statusByLocale.detailsSummaryFormat'?: string | undefined;
            'statusByLocale.detailsTitleFormat'?: string | undefined;
            'statusByLocale.outdatedLocalizationLink'?: string | undefined;
            'statusByLocale.incompleteLocalizationLink'?: string | undefined;
            'statusByLocale.createFileLink'?: string | undefined;
            'statusByLocale.sourceChangeHistoryLink'?: string | undefined;
            'statusByLocale.missingKeys'?: string | undefined;
            'statusByLocale.completeLocalization'?: string | undefined;
            'statusByFile.heading'?: string | undefined;
            'statusByFile.tableRowFile'?: string | undefined;
            'statusByFile.tableSummaryFormat'?: string | undefined;
        } | undefined;
    }>>;
    /** Information about your project's repository */
    repository: z.ZodObject<{
        /** The unique name of your repository in your git hosting platform, e.g. `"Yan-Thomas/lunaria"` */
        name: z.ZodEffects<z.ZodString, string, string>;
        /** The currently tracked branch of your repository */
        branch: z.ZodDefault<z.ZodString>;
        /** The root directory of the project being tracked, must be set when using a monorepo */
        rootDir: z.ZodEffects<z.ZodEffects<z.ZodDefault<z.ZodString>, string, string | undefined>, string, string | undefined>;
        /** The git hosting platform used by your project, e.g. `"github"` or `"gitlab"` */
        hosting: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"github">, z.ZodLiteral<"gitlab">]>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        branch: string;
        rootDir: string;
        hosting: "github" | "gitlab";
    }, {
        name: string;
        branch?: string | undefined;
        rootDir?: string | undefined;
        hosting?: "github" | "gitlab" | undefined;
    }>;
    /** The default locale of your content that is going to be localized */
    defaultLocale: z.ZodObject<{
        /** The label of the locale to show in the status dashboard, e.g. `"English"`, `"Português"`, or `"Español"` */
        label: z.ZodString;
        /** The BCP-47 tag of the locale, both to use in smaller widths and to differentiate regional variants, e.g. `"en-US"` (American English) or `"en-GB"` (British English) */
        lang: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        lang: string;
        label: string;
    }, {
        lang: string;
        label: string;
    }>;
    /** Array of the localized locales */
    locales: z.ZodArray<z.ZodObject<{
        /** The label of the locale to show in the status dashboard, e.g. `"English"`, `"Português"`, or `"Español"` */
        label: z.ZodString;
        /** The BCP-47 tag of the locale, both to use in smaller widths and to differentiate regional variants, e.g. `"en-US"` (American English) or `"en-GB"` (British English) */
        lang: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        lang: string;
        label: string;
    }, {
        lang: string;
        label: string;
    }>, "atleastone">;
    /** Array of files to be tracked */
    files: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        location: z.ZodString;
        ignore: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        pattern: z.ZodString;
        type: z.ZodLiteral<"universal">;
    }, "strip", z.ZodTypeAny, {
        type: "universal";
        location: string;
        ignore: string[];
        pattern: string;
    }, {
        type: "universal";
        location: string;
        pattern: string;
        ignore?: string[] | undefined;
    }>, z.ZodObject<{
        location: z.ZodString;
        ignore: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        pattern: z.ZodString;
        type: z.ZodLiteral<"dictionary">;
        optionalKeys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        type: "dictionary";
        location: string;
        ignore: string[];
        pattern: string;
        optionalKeys?: Record<string, string[]> | undefined;
    }, {
        type: "dictionary";
        location: string;
        pattern: string;
        ignore?: string[] | undefined;
        optionalKeys?: Record<string, string[]> | undefined;
    }>]>, "atleastone">;
    /** Array of commit keywords that avoid a commit from triggering status changes */
    ignoreKeywords: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    /** Name of the frontmatter property used to mark a file as localizable
     * and include it as part of the status dashboard. Keep empty for every file to be unconditionally localizable
     */
    localizableProperty: z.ZodOptional<z.ZodString>;
    /** The relative directory path of where your dashboard will build to, e.g. `"./dist/lunaria"` */
    outDir: z.ZodDefault<z.ZodString>;
    /** The relative directory path of your git history clone, exclusively made when running on a shallow repository, e.g. `"./dist/lunaria/history"` */
    cloneDir: z.ZodDefault<z.ZodString>;
    /** The relative path to a valid `.(c/m)js` or `.(c/m)ts` file containing your dashboard renderer configuration */
    renderer: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    dashboard: {
        title: string;
        description: string;
        ui: {
            lang: string;
            dir: "ltr" | "rtl";
            'status.done': string;
            'status.outdated': string;
            'status.missing': string;
            'status.emojiDone': string;
            'status.emojiOutdated': string;
            'status.emojiMissing': string;
            'statusByLocale.heading': string;
            'statusByLocale.detailsSummaryFormat': string;
            'statusByLocale.detailsTitleFormat': string;
            'statusByLocale.outdatedLocalizationLink': string;
            'statusByLocale.incompleteLocalizationLink': string;
            'statusByLocale.createFileLink': string;
            'statusByLocale.sourceChangeHistoryLink': string;
            'statusByLocale.missingKeys': string;
            'statusByLocale.completeLocalization': string;
            'statusByFile.heading': string;
            'statusByFile.tableRowFile': string;
            'statusByFile.tableSummaryFormat': string;
        };
        site?: string | undefined;
        basesToHide?: string[] | undefined;
        customCss?: string[] | undefined;
        favicon?: {
            external?: [{
                type: string;
                link: string;
            }, ...{
                type: string;
                link: string;
            }[]] | undefined;
            inline?: string | undefined;
        } | undefined;
    };
    repository: {
        name: string;
        branch: string;
        rootDir: string;
        hosting: "github" | "gitlab";
    };
    defaultLocale: {
        lang: string;
        label: string;
    };
    locales: [{
        lang: string;
        label: string;
    }, ...{
        lang: string;
        label: string;
    }[]];
    files: [{
        type: "universal";
        location: string;
        ignore: string[];
        pattern: string;
    } | {
        type: "dictionary";
        location: string;
        ignore: string[];
        pattern: string;
        optionalKeys?: Record<string, string[]> | undefined;
    }, ...({
        type: "universal";
        location: string;
        ignore: string[];
        pattern: string;
    } | {
        type: "dictionary";
        location: string;
        ignore: string[];
        pattern: string;
        optionalKeys?: Record<string, string[]> | undefined;
    })[]];
    ignoreKeywords: string[];
    outDir: string;
    cloneDir: string;
    $schema?: string | undefined;
    localizableProperty?: string | undefined;
    renderer?: string | undefined;
}, {
    repository: {
        name: string;
        branch?: string | undefined;
        rootDir?: string | undefined;
        hosting?: "github" | "gitlab" | undefined;
    };
    defaultLocale: {
        lang: string;
        label: string;
    };
    locales: [{
        lang: string;
        label: string;
    }, ...{
        lang: string;
        label: string;
    }[]];
    files: [{
        type: "universal";
        location: string;
        pattern: string;
        ignore?: string[] | undefined;
    } | {
        type: "dictionary";
        location: string;
        pattern: string;
        ignore?: string[] | undefined;
        optionalKeys?: Record<string, string[]> | undefined;
    }, ...({
        type: "universal";
        location: string;
        pattern: string;
        ignore?: string[] | undefined;
    } | {
        type: "dictionary";
        location: string;
        pattern: string;
        ignore?: string[] | undefined;
        optionalKeys?: Record<string, string[]> | undefined;
    })[]];
    $schema?: string | undefined;
    dashboard?: {
        title?: string | undefined;
        description?: string | undefined;
        site?: string | undefined;
        basesToHide?: string[] | undefined;
        customCss?: string[] | undefined;
        favicon?: {
            external?: [{
                type: string;
                link: string;
            }, ...{
                type: string;
                link: string;
            }[]] | undefined;
            inline?: string | undefined;
        } | undefined;
        ui?: {
            lang?: string | undefined;
            dir?: "ltr" | "rtl" | undefined;
            'status.done'?: string | undefined;
            'status.outdated'?: string | undefined;
            'status.missing'?: string | undefined;
            'status.emojiDone'?: string | undefined;
            'status.emojiOutdated'?: string | undefined;
            'status.emojiMissing'?: string | undefined;
            'statusByLocale.heading'?: string | undefined;
            'statusByLocale.detailsSummaryFormat'?: string | undefined;
            'statusByLocale.detailsTitleFormat'?: string | undefined;
            'statusByLocale.outdatedLocalizationLink'?: string | undefined;
            'statusByLocale.incompleteLocalizationLink'?: string | undefined;
            'statusByLocale.createFileLink'?: string | undefined;
            'statusByLocale.sourceChangeHistoryLink'?: string | undefined;
            'statusByLocale.missingKeys'?: string | undefined;
            'statusByLocale.completeLocalization'?: string | undefined;
            'statusByFile.heading'?: string | undefined;
            'statusByFile.tableRowFile'?: string | undefined;
            'statusByFile.tableSummaryFormat'?: string | undefined;
        } | undefined;
    } | undefined;
    ignoreKeywords?: string[] | undefined;
    localizableProperty?: string | undefined;
    outDir?: string | undefined;
    cloneDir?: string | undefined;
    renderer?: string | undefined;
}>, {
    dashboard: {
        title: string;
        description: string;
        ui: {
            lang: string;
            dir: "ltr" | "rtl";
            'status.done': string;
            'status.outdated': string;
            'status.missing': string;
            'status.emojiDone': string;
            'status.emojiOutdated': string;
            'status.emojiMissing': string;
            'statusByLocale.heading': string;
            'statusByLocale.detailsSummaryFormat': string;
            'statusByLocale.detailsTitleFormat': string;
            'statusByLocale.outdatedLocalizationLink': string;
            'statusByLocale.incompleteLocalizationLink': string;
            'statusByLocale.createFileLink': string;
            'statusByLocale.sourceChangeHistoryLink': string;
            'statusByLocale.missingKeys': string;
            'statusByLocale.completeLocalization': string;
            'statusByFile.heading': string;
            'statusByFile.tableRowFile': string;
            'statusByFile.tableSummaryFormat': string;
        };
        site?: string | undefined;
        basesToHide?: string[] | undefined;
        customCss?: string[] | undefined;
        favicon?: {
            external?: [{
                type: string;
                link: string;
            }, ...{
                type: string;
                link: string;
            }[]] | undefined;
            inline?: string | undefined;
        } | undefined;
    };
    repository: {
        name: string;
        branch: string;
        rootDir: string;
        hosting: "github" | "gitlab";
    };
    defaultLocale: {
        lang: string;
        label: string;
    };
    locales: [{
        lang: string;
        label: string;
    }, ...{
        lang: string;
        label: string;
    }[]];
    files: [{
        type: "universal";
        location: string;
        ignore: string[];
        pattern: string;
    } | {
        type: "dictionary";
        location: string;
        ignore: string[];
        pattern: string;
        optionalKeys?: Record<string, string[]> | undefined;
    }, ...({
        type: "universal";
        location: string;
        ignore: string[];
        pattern: string;
    } | {
        type: "dictionary";
        location: string;
        ignore: string[];
        pattern: string;
        optionalKeys?: Record<string, string[]> | undefined;
    })[]];
    ignoreKeywords: string[];
    outDir: string;
    cloneDir: string;
    $schema?: string | undefined;
    localizableProperty?: string | undefined;
    renderer?: string | undefined;
}, {
    repository: {
        name: string;
        branch?: string | undefined;
        rootDir?: string | undefined;
        hosting?: "github" | "gitlab" | undefined;
    };
    defaultLocale: {
        lang: string;
        label: string;
    };
    locales: [{
        lang: string;
        label: string;
    }, ...{
        lang: string;
        label: string;
    }[]];
    files: [{
        type: "universal";
        location: string;
        pattern: string;
        ignore?: string[] | undefined;
    } | {
        type: "dictionary";
        location: string;
        pattern: string;
        ignore?: string[] | undefined;
        optionalKeys?: Record<string, string[]> | undefined;
    }, ...({
        type: "universal";
        location: string;
        pattern: string;
        ignore?: string[] | undefined;
    } | {
        type: "dictionary";
        location: string;
        pattern: string;
        ignore?: string[] | undefined;
        optionalKeys?: Record<string, string[]> | undefined;
    })[]];
    $schema?: string | undefined;
    dashboard?: {
        title?: string | undefined;
        description?: string | undefined;
        site?: string | undefined;
        basesToHide?: string[] | undefined;
        customCss?: string[] | undefined;
        favicon?: {
            external?: [{
                type: string;
                link: string;
            }, ...{
                type: string;
                link: string;
            }[]] | undefined;
            inline?: string | undefined;
        } | undefined;
        ui?: {
            lang?: string | undefined;
            dir?: "ltr" | "rtl" | undefined;
            'status.done'?: string | undefined;
            'status.outdated'?: string | undefined;
            'status.missing'?: string | undefined;
            'status.emojiDone'?: string | undefined;
            'status.emojiOutdated'?: string | undefined;
            'status.emojiMissing'?: string | undefined;
            'statusByLocale.heading'?: string | undefined;
            'statusByLocale.detailsSummaryFormat'?: string | undefined;
            'statusByLocale.detailsTitleFormat'?: string | undefined;
            'statusByLocale.outdatedLocalizationLink'?: string | undefined;
            'statusByLocale.incompleteLocalizationLink'?: string | undefined;
            'statusByLocale.createFileLink'?: string | undefined;
            'statusByLocale.sourceChangeHistoryLink'?: string | undefined;
            'statusByLocale.missingKeys'?: string | undefined;
            'statusByLocale.completeLocalization'?: string | undefined;
            'statusByFile.heading'?: string | undefined;
            'statusByFile.tableRowFile'?: string | undefined;
            'statusByFile.tableSummaryFormat'?: string | undefined;
        } | undefined;
    } | undefined;
    ignoreKeywords?: string[] | undefined;
    localizableProperty?: string | undefined;
    outDir?: string | undefined;
    cloneDir?: string | undefined;
    renderer?: string | undefined;
}>;
declare const LunariaRendererConfigSchema: z.ZodObject<{
    slots: z.ZodDefault<z.ZodObject<{
        head: z.ZodOptional<z.ZodType<(config: LunariaConfig) => string, z.ZodTypeDef, (config: LunariaConfig) => string>>;
        beforeTitle: z.ZodOptional<z.ZodType<(config: LunariaConfig) => string, z.ZodTypeDef, (config: LunariaConfig) => string>>;
        afterTitle: z.ZodOptional<z.ZodType<(config: LunariaConfig) => string, z.ZodTypeDef, (config: LunariaConfig) => string>>;
        afterStatusByLocale: z.ZodOptional<z.ZodType<(config: LunariaConfig) => string, z.ZodTypeDef, (config: LunariaConfig) => string>>;
        afterStatusByFile: z.ZodOptional<z.ZodType<(config: LunariaConfig) => string, z.ZodTypeDef, (config: LunariaConfig) => string>>;
    }, "strip", z.ZodTypeAny, {
        head?: ((config: LunariaConfig) => string) | undefined;
        beforeTitle?: ((config: LunariaConfig) => string) | undefined;
        afterTitle?: ((config: LunariaConfig) => string) | undefined;
        afterStatusByLocale?: ((config: LunariaConfig) => string) | undefined;
        afterStatusByFile?: ((config: LunariaConfig) => string) | undefined;
    }, {
        head?: ((config: LunariaConfig) => string) | undefined;
        beforeTitle?: ((config: LunariaConfig) => string) | undefined;
        afterTitle?: ((config: LunariaConfig) => string) | undefined;
        afterStatusByLocale?: ((config: LunariaConfig) => string) | undefined;
        afterStatusByFile?: ((config: LunariaConfig) => string) | undefined;
    }>>;
    overrides: z.ZodDefault<z.ZodObject<{
        meta: z.ZodOptional<z.ZodType<(config: LunariaConfig) => string, z.ZodTypeDef, (config: LunariaConfig) => string>>;
        body: z.ZodOptional<z.ZodType<(config: LunariaConfig, status: LocalizationStatus[]) => string, z.ZodTypeDef, (config: LunariaConfig, status: LocalizationStatus[]) => string>>;
        statusByLocale: z.ZodOptional<z.ZodType<(config: LunariaConfig, status: LocalizationStatus[]) => string, z.ZodTypeDef, (config: LunariaConfig, status: LocalizationStatus[]) => string>>;
        statusByFile: z.ZodOptional<z.ZodType<(config: LunariaConfig, status: LocalizationStatus[]) => string, z.ZodTypeDef, (config: LunariaConfig, status: LocalizationStatus[]) => string>>;
    }, "strip", z.ZodTypeAny, {
        meta?: ((config: LunariaConfig) => string) | undefined;
        body?: ((config: LunariaConfig, status: LocalizationStatus[]) => string) | undefined;
        statusByLocale?: ((config: LunariaConfig, status: LocalizationStatus[]) => string) | undefined;
        statusByFile?: ((config: LunariaConfig, status: LocalizationStatus[]) => string) | undefined;
    }, {
        meta?: ((config: LunariaConfig) => string) | undefined;
        body?: ((config: LunariaConfig, status: LocalizationStatus[]) => string) | undefined;
        statusByLocale?: ((config: LunariaConfig, status: LocalizationStatus[]) => string) | undefined;
        statusByFile?: ((config: LunariaConfig, status: LocalizationStatus[]) => string) | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    slots: {
        head?: ((config: LunariaConfig) => string) | undefined;
        beforeTitle?: ((config: LunariaConfig) => string) | undefined;
        afterTitle?: ((config: LunariaConfig) => string) | undefined;
        afterStatusByLocale?: ((config: LunariaConfig) => string) | undefined;
        afterStatusByFile?: ((config: LunariaConfig) => string) | undefined;
    };
    overrides: {
        meta?: ((config: LunariaConfig) => string) | undefined;
        body?: ((config: LunariaConfig, status: LocalizationStatus[]) => string) | undefined;
        statusByLocale?: ((config: LunariaConfig, status: LocalizationStatus[]) => string) | undefined;
        statusByFile?: ((config: LunariaConfig, status: LocalizationStatus[]) => string) | undefined;
    };
}, {
    slots?: {
        head?: ((config: LunariaConfig) => string) | undefined;
        beforeTitle?: ((config: LunariaConfig) => string) | undefined;
        afterTitle?: ((config: LunariaConfig) => string) | undefined;
        afterStatusByLocale?: ((config: LunariaConfig) => string) | undefined;
        afterStatusByFile?: ((config: LunariaConfig) => string) | undefined;
    } | undefined;
    overrides?: {
        meta?: ((config: LunariaConfig) => string) | undefined;
        body?: ((config: LunariaConfig, status: LocalizationStatus[]) => string) | undefined;
        statusByLocale?: ((config: LunariaConfig, status: LocalizationStatus[]) => string) | undefined;
        statusByFile?: ((config: LunariaConfig, status: LocalizationStatus[]) => string) | undefined;
    } | undefined;
}>;
type OptionalKeys = z.infer<typeof OptionalKeysSchema>;
type Locale = z.infer<typeof LocaleSchema>;
type File = z.infer<typeof FileSchema>;
type LunariaConfig = z.infer<typeof LunariaConfigSchema>;
type LunariaUserConfig = z.input<typeof LunariaConfigSchema>;
type LunariaRendererConfig = z.infer<typeof LunariaRendererConfigSchema>;
type LunariaUserRendererConfig = z.input<typeof LunariaRendererConfigSchema>;

type GitHistory = {
    lastChange: string;
    lastCommitMessage: string;
    lastMajorChange: string;
    lastMajorCommitMessage: string;
};
type GitHosting = {
    gitHostingFileURL: string;
    gitHostingHistoryURL: string;
};
type FileData = {
    path: string;
    isLocalizable: boolean;
    git: GitHistory;
};
type FileIndex = Record<string, Record<string, IndexEntry>>;
type IndexEntry = FileData & GitHosting & {
    lang: string;
    sharedPath: string;
    pattern: string;
    meta: SourceFileMeta;
};
type LocalizationStatus = {
    sharedPath: string;
    sourceFile: SourceFileData;
    localizations: {
        [locale: string]: LocalizationFileData;
    };
};
type SourceFileMeta = {
    type: 'universal';
} | {
    type: 'dictionary';
    optionalKeys?: OptionalKeys;
};
type SourceFileData = GitHosting & {
    lang: string;
    path: string;
    pattern: string;
    isLocalizable: boolean;
    git: GitHistory;
    meta: SourceFileMeta;
};
type LocalizationFileMeta = {
    type: 'universal';
} | {
    type: 'dictionary';
    missingKeys: string[];
};
type LocalizationFileData = (GitHosting & {
    isMissing: true;
}) | (GitHosting & {
    lang: string;
    path: string;
    pattern: string;
    isLocalizable: boolean;
    git: GitHistory;
    meta: LocalizationFileMeta;
    isMissing: false;
    isOutdated: boolean;
});
type Status = 'done' | 'outdated' | 'missing';
type RegExpGroups<T extends string> = (RegExpMatchArray & {
    groups?: {
        [name in T]: string;
    } | {
        [key: string]: string;
    };
}) | null;
type Dictionary = {
    [key: string]: string | Dictionary;
};

export { type Dictionary as D, type FileData as F, type GitHistory as G, type IndexEntry as I, type LunariaUserConfig as L, OptionalKeysSchema as O, type RegExpGroups as R, type SourceFileMeta as S, type LocalizationStatus as a, type LunariaUserRendererConfig as b, type GitHosting as c, type FileIndex as d, type SourceFileData as e, type LocalizationFileMeta as f, type LocalizationFileData as g, type Status as h, type LunariaConfig as i, type LunariaRendererConfig as j, type Locale as k, LunariaConfigSchema as l, LunariaRendererConfigSchema as m, type OptionalKeys as n, type File as o };
