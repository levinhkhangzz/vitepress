import { g as getStringFromFormat } from './core.492ac407.mjs';
import { existsSync, readFileSync } from 'node:fs';
import { resolve, extname } from 'node:path';
import { error } from '../cli/console.mjs';
import { isRelative } from 'ufo';
import { z } from 'zod';

function readAsset(path) {
  const resolvedPath = resolve(path);
  if (!existsSync(resolvedPath)) {
    console.error(error(`Could not find asset file at ${resolvedPath}. Does it exist?`));
    process.exit(1);
  }
  const asset = readFileSync(resolvedPath, "utf-8");
  return asset;
}
function getCollapsedPath(dashboard, path) {
  const { basesToHide } = dashboard;
  if (!basesToHide)
    return path;
  for (const base of basesToHide) {
    const newPath = path.replace(base, "");
    if (newPath === path)
      continue;
    return newPath;
  }
  return path;
}
function inlineCustomCssFiles(customCssPaths) {
  if (!customCssPaths)
    return null;
  const inlinedCss = customCssPaths.map((path) => {
    const css = readAsset(path);
    return css;
  });
  return inlinedCss;
}

const Styles = html`
	<style>
		:root {
			/** Fonts */
			--ln-font-fallback: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif,
				Apple Color Emoji, Segoe UI Emoji;
			--ln-font-body: system-ui, var(--ln-font-fallback);
			--ln-font-mono: 'IBM Plex Mono', Consolas, 'Andale Mono WT', 'Andale Mono', 'Lucida Console',
				'Lucida Sans Typewriter', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Liberation Mono',
				'Nimbus Mono L', Monaco, 'Courier New', Courier, monospace;

			/* Light theme colors */
			--ln-color-white: #f9fafb;
			--ln-color-gray-1: #f3f4f6;
			--ln-color-gray-2: #e5e7eb;
			--ln-color-gray-3: #d1d5db;
			--ln-color-gray-4: #9ca3af;
			--ln-color-gray-5: #6b7280;
			--ln-color-gray-6: #4b5563;
			--ln-color-gray-7: #374151;
			--ln-color-black: #030712;
			--ln-color-blue: #3b82f6;
			--ln-color-orange: #f97316;
			--ln-color-purple: #a855f7;

			/** Contextual colors */
			--ln-color-background: var(--ln-color-white);
			--ln-color-link: var(--ln-color-blue);
			--ln-color-done: var(--ln-color-purple);
			--ln-color-outdated: var(--ln-color-orange);
			--ln-color-missing: var(--ln-color-black);
			--ln-color-table-border: var(--ln-color-gray-3);
			--ln-color-table-background: var(--ln-color-gray-1);
		}

		@media (prefers-color-scheme: dark) {
			:root {
				/* Dark theme colors */
				--ln-color-white: #030712;
				--ln-color-gray-1: #374151;
				--ln-color-gray-2: #4b5563;
				--ln-color-gray-3: #6b7280;
				--ln-color-gray-4: #9ca3af;
				--ln-color-gray-5: #d1d5db;
				--ln-color-gray-6: #e5e7eb;
				--ln-color-gray-7: #f3f4f6;
				--ln-color-black: #f9fafb;
				--ln-color-blue: #60a5fa;
				--ln-color-orange: #fb923c;
				--ln-color-purple: #c084fc;
			}
		}

		* {
			box-sizing: border-box;
			margin: 0;
		}

		html {
			background: var(--ln-color-background);
			scrollbar-gutter: stable;
		}

		body {
			color: var(--ln-color-black);
			display: flex;
			flex-direction: column;
			font-family: var(--ln-font-body);
			font-size: 16px;
			line-height: 1.5;
			margin-block: 2rem;
			margin-inline: 1rem;
		}

		h1,
		h2,
		h3,
		h4,
		h5,
		h6 {
			margin-bottom: 1rem;
			font-weight: bold;
			line-height: 1.3;
		}

		h1,
		h2 {
			max-width: 40ch;
		}

		h1 {
			font-size: 2.25rem;
			font-weight: 900;
		}

		h2 {
			font-size: 1.875rem;
			margin-top: 4rem;
		}

		h3,
		h4 {
			margin-top: 3rem;
		}

		h5,
		h6 {
			margin-top: 2rem;
		}

		main {
			max-width: 80ch;
			margin-inline: auto;
		}

		.limit-to-viewport {
			max-width: calc(100vw - 2rem);
		}

		p + p {
			margin-top: 1.25rem;
		}

		a {
			color: var(--ln-color-link);
			text-decoration: none;
		}

		h2 a {
			color: inherit;
		}

		a:hover {
			text-decoration: underline;
		}

		ul {
			font-size: 0.875rem;
		}

		.progress-details {
			margin-bottom: 1.25rem;
		}

		details summary {
			cursor: pointer;
			user-select: none;
		}

		details summary:hover strong,
		details summary:hover::marker {
			color: var(--ln-color-gray-5);
		}

		details p {
			margin-top: 1.2rem;
		}

		details h3 {
			margin-top: 1.2rem;
			font-size: 0.8rem;
		}

		details h4 {
			margin-top: 1rem;
			font-size: 0.8rem;
		}

		details > :last-child {
			margin-bottom: 1rem;
		}

		.create-button {
			padding: 0.1em 0.5em;
			font-weight: bold;
			font-size: 0.75rem;
		}

		.status-by-file {
			margin-bottom: 1rem;
			border-collapse: collapse;
			border: 1px solid var(--ln-color-table-border);
			font-size: 0.8125rem;
			column-gap: 64px;
		}

		.status-by-file tr:first-of-type td {
			padding-top: 0.5rem;
		}

		.status-by-file tr:last-of-type td {
			padding-bottom: 0.5rem;
		}

		.status-by-file tr td:first-of-type {
			padding-inline: 1rem;
		}

		.status-by-file th {
			border-bottom: 1px solid var(--ln-color-table-border);
			background: var(--ln-color-table-background);
			position: sticky;
			top: -1px;
			white-space: nowrap;
			padding-inline: 0.3rem;
		}

		.status-by-file th,
		.status-by-file td {
			padding-block: 0.2rem;
		}

		.status-by-file tbody tr:hover td {
			background: var(--ln-color-table-background);
		}

		.status-by-file th:first-of-type,
		.status-by-file td:first-of-type {
			text-align: left;
			padding-inline-start: 1rem;
		}

		.status-by-file th:last-of-type,
		.status-by-file td:last-of-type {
			text-align: center;
			padding-inline-end: 1rem;
		}

		.status-by-file td:not(:first-of-type) {
			min-width: 2rem;
			text-align: center;
			cursor: default;
		}

		.status-by-file td:not(:first-of-type) a {
			text-decoration: none;
		}

		.progress-summary {
			font-size: 0.8125rem;
		}

		.progress-bar {
			display: flex;
			flex-direction: row;
			margin-top: 0.5rem;
		}

		.progress-bar div:first-of-type {
			border-radius: 36px 0px 0px 36px;
		}

		.progress-bar div:last-of-type {
			border-radius: 0px 36px 36px 0px;
		}

		.done-bar,
		.outdated-bar,
		.missing-bar {
			width: 1rem;
			height: 1rem;
		}

		.done-bar {
			background-color: var(--ln-color-done);
		}

		.outdated-bar {
			background-color: var(--ln-color-outdated);
		}

		.missing-bar {
			background-color: var(--ln-color-missing);
		}

		.capitalize {
			text-transform: capitalize;
		}
	</style>
`;

const Page = (config, rendererConfig, status) => {
  const { dashboard } = config;
  const inlinedCssFiles = inlineCustomCssFiles(dashboard.customCss);
  return html`
		<!doctype html>
		<html dir="${dashboard.ui.dir}" lang="${dashboard.ui.lang}">
			<head>
				<!-- Built-in/custom meta tags -->
				${rendererConfig?.overrides.meta?.(config) ?? Meta(dashboard)}
				<!-- Additional head tags -->
				${rendererConfig?.slots.head?.(config) ?? ""}
				<!-- Built-in styles -->
				${Styles}
				<!-- Custom styles -->
				${inlinedCssFiles?.map(
    (css) => html`<style>
							${css}
						</style>`
  ) ?? ""}
			</head>
			<body>
				<!-- Built-in/custom body content -->
				${rendererConfig?.overrides.body?.(config, status) ?? Body(config, rendererConfig, status)}
			</body>
		</html>
	`;
};
const Meta = (dashboard) => html`
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />
	<title>${dashboard.title}</title>
	<meta name="description" content="${dashboard.description}" />
	${dashboard.site ? html`<link rel="canonical" href="${dashboard.site}" />` : ""}
	<meta property="og:title" content="${dashboard.title}" />
	<meta property="og:type" content="website" />
	${dashboard.site ? html`<meta property="og:url" content="${dashboard.site}" />` : ""}
	<meta property="og:description" content="${dashboard.description}" />
	${Favicon(dashboard)}
`;
const Favicon = (dashboard) => {
  const { favicon } = dashboard;
  const svg = favicon?.inline ? readAsset(favicon.inline) : "";
  const inlineSvg = "data:image/svg+xml;utf8," + svg;
  const ExternalFavicon = favicon?.external ? html`${favicon.external.map(
    (icon) => html`<link rel="icon" href="${icon.link}" type="${icon.type}" />`
  )}` : "";
  const InlineFavicon = favicon?.inline ? html`<link rel="icon" href="${inlineSvg}" />` : "";
  return html`${ExternalFavicon} ${InlineFavicon}`;
};
const Body = (config, rendererConfig, status) => {
  const { dashboard } = config;
  return html`
		<main>
			<div class="limit-to-viewport">
				${rendererConfig?.slots.beforeTitle?.(config) ?? ""}
				<h1>${dashboard.title}</h1>
				${rendererConfig?.slots.afterTitle?.(config) ?? ""}
				${rendererConfig?.overrides.statusByLocale?.(config, status) ?? StatusByLocale(config, status)}
				${rendererConfig?.slots.afterStatusByLocale?.(config) ?? ""}
			</div>
			${rendererConfig?.overrides.statusByFile?.(config, status) ?? StatusByFile(config, status)}
			${rendererConfig?.slots.afterStatusByFile?.(config) ?? ""}
		</main>
	`;
};
const StatusByLocale = (config, status) => {
  const { dashboard, locales } = config;
  return html`
		<h2 id="by-locale">
			<a href="#by-locale">${dashboard.ui["statusByLocale.heading"]}</a>
		</h2>
		${locales.map((locale) => LocaleDetails(status, dashboard, locale))}
	`;
};
const LocaleDetails = (status, dashboard, locale) => {
  const { label, lang } = locale;
  const missingFiles = status.filter((file) => file.localizations[lang]?.isMissing);
  const outdatedFiles = status.filter((file) => {
    const localization = file.localizations[lang];
    if (localization.isMissing)
      return false;
    if (localization.meta.type === "dictionary")
      return localization.meta.missingKeys.length > 0;
    return localization.isOutdated;
  });
  const doneLength = status.length - outdatedFiles.length - missingFiles.length;
  return html`
		<details class="progress-details">
			<summary>
				<strong
					>${getStringFromFormat(dashboard.ui["statusByLocale.detailsTitleFormat"], {
    "{locale_name}": label,
    "{locale_tag}": lang
  })}</strong
				>
				<br />
				<span class="progress-summary"
					>${getStringFromFormat(dashboard.ui["statusByLocale.detailsSummaryFormat"], {
    "{done_amount}": doneLength.toString(),
    "{done_word}": dashboard.ui["status.done"],
    "{outdated_amount}": outdatedFiles.length.toString(),
    "{outdated_word}": dashboard.ui["status.outdated"],
    "{missing_amount}": missingFiles.length.toString(),
    "{missing_word}": dashboard.ui["status.missing"]
  })}</span
				>
				<br />
				${ProgressBar(status.length, outdatedFiles.length, missingFiles.length)}
			</summary>
			${outdatedFiles.length > 0 ? OutdatedFiles(outdatedFiles, lang, dashboard) : ""}
			${missingFiles.length > 0 ? html`<h3 class="capitalize">${dashboard.ui["status.missing"]}</h3>
						<ul>
							${missingFiles.map(
    (file) => html`
									<li>
										${file.sourceFile.gitHostingFileURL ? Link(
      file.sourceFile.gitHostingFileURL,
      getCollapsedPath(dashboard, file.sharedPath)
    ) : getCollapsedPath(dashboard, file.sharedPath)}
										${file.localizations[lang]?.gitHostingFileURL ? CreateFileLink(
      file.localizations[lang]?.gitHostingFileURL,
      dashboard.ui["statusByLocale.createFileLink"]
    ) : ""}
									</li>
								`
  )}
						</ul>` : ""}
			${missingFiles.length == 0 && outdatedFiles.length == 0 ? html`<p>${dashboard.ui["statusByLocale.completeLocalization"]}</p>` : ""}
		</details>
	`;
};
const OutdatedFiles = (outdatedFiles, lang, dashboard) => {
  return html`
		<h3 class="capitalize">${dashboard.ui["status.outdated"]}</h3>
		<ul>
			${outdatedFiles.map((file) => {
    const localization = file.localizations[lang];
    const isMissingKeys = !localization.isMissing && localization.meta.type === "dictionary" && localization.meta.missingKeys.length > 0;
    return html`
					<li>
						${isMissingKeys && "missingKeys" in localization.meta ? html`
									<details>
										<summary>${ContentDetailsLinks(file, lang, dashboard)}</summary>
										${html`
											<h4>${dashboard.ui["statusByLocale.missingKeys"]}</h4>
											<ul>
												${localization.meta.missingKeys.map((key) => html`<li>${key}</li>`)}
											</ul>
										`}
									</details>
							  ` : html` ${ContentDetailsLinks(file, lang, dashboard)} `}
					</li>
				`;
  })}
		</ul>
	`;
};
const StatusByFile = (config, status) => {
  const { dashboard, locales } = config;
  return html`
		<h2 id="by-file">
			<a href="#by-file">${dashboard.ui["statusByFile.heading"]}</a>
		</h2>
		<table class="status-by-file">
			<thead>
				<tr>
					${[dashboard.ui["statusByFile.tableRowFile"], ...locales.map(({ lang }) => lang)].map(
    (col) => html`<th>${col}</th>`
  )}
				</tr>
			</thead>
			${TableBody(status, locales, dashboard)}
		</table>
		<sup class="capitalize"
			>${getStringFromFormat(dashboard.ui["statusByFile.tableSummaryFormat"], {
    "{missing_emoji}": dashboard.ui["status.emojiMissing"],
    "{missing_word}": dashboard.ui["status.missing"],
    "{outdated_emoji}": dashboard.ui["status.emojiOutdated"],
    "{outdated_word}": dashboard.ui["status.outdated"],
    "{done_emoji}": dashboard.ui["status.emojiDone"],
    "{done_word}": dashboard.ui["status.done"]
  })}
		</sup>
	`;
};
const TableBody = (status, locales, dashboard) => {
  return html`
		<tbody>
			${status.map(
    (file) => html`
				<tr>
					<td>${file.sourceFile.gitHostingFileURL ? Link(
      file.sourceFile.gitHostingFileURL,
      getCollapsedPath(dashboard, file.sharedPath)
    ) : getCollapsedPath(dashboard, file.sharedPath)}</td>
						${locales.map(({ lang }) => {
      return TableContentStatus(file.localizations, lang, dashboard);
    })}
					</td>
				</tr>`
  )}
		</tbody>
	`;
};
const TableContentStatus = (localizations, lang, dashboard) => {
  const localization = localizations[lang];
  const isMissingKeys = !localization.isMissing && localization.meta.type === "dictionary" && localization.meta.missingKeys.length > 0;
  return html`
		<td>
			${localization?.isMissing ? EmojiFileLink(dashboard.ui, localization?.gitHostingFileURL, "missing") : localization?.isOutdated || isMissingKeys ? EmojiFileLink(dashboard.ui, localizations[lang]?.gitHostingFileURL, "outdated") : EmojiFileLink(dashboard.ui, localizations[lang]?.gitHostingFileURL, "done")}
		</td>
	`;
};
const ContentDetailsLinks = (fileStatus, lang, dashboard) => {
  const localization = fileStatus.localizations[lang];
  const isMissingKeys = !localization.isMissing && localization.meta.type === "dictionary" && localization.meta.missingKeys.length > 0;
  return html`
		${fileStatus.sourceFile.gitHostingFileURL ? Link(
    fileStatus.sourceFile.gitHostingFileURL,
    getCollapsedPath(dashboard, fileStatus.sharedPath)
  ) : getCollapsedPath(dashboard, fileStatus.sharedPath)}
		${localization ? localization?.gitHostingFileURL || localization?.gitHostingHistoryURL ? html`(${localization?.gitHostingFileURL ? Link(
    localization?.gitHostingFileURL,
    isMissingKeys ? dashboard.ui["statusByLocale.incompleteLocalizationLink"] : dashboard.ui["statusByLocale.outdatedLocalizationLink"]
  ) : ""},
				  ${localization?.gitHostingHistoryURL ? Link(
    localization?.gitHostingHistoryURL,
    dashboard.ui["statusByLocale.sourceChangeHistoryLink"]
  ) : ""})` : "" : ""}
	`;
};
const EmojiFileLink = (ui, href, type) => {
  const statusTextOpts = {
    missing: "status.missing",
    outdated: "status.outdated",
    done: "status.done"
  };
  const statusEmojiOpts = {
    missing: "status.emojiMissing",
    outdated: "status.emojiOutdated",
    done: "status.emojiDone"
  };
  return href ? html`<a href="${href}" title="${ui[statusTextOpts[type]]}">
				<span aria-hidden="true">${ui[statusEmojiOpts[type]]}</span>
		  </a>` : html`<span title="${ui[statusTextOpts[type]]}">
				<span aria-hidden="true">${ui[statusEmojiOpts[type]]}</span>
		  </span>`;
};
const Link = (href, text) => {
  return html`<a href="${href}">${text}</a>`;
};
const CreateFileLink = (href, text) => {
  return html`<a class="create-button" href="${href}">${text}</a>`;
};
const ProgressBar = (total, outdated, missing, { size = 20 } = {}) => {
  const outdatedSize = Math.round(outdated / total * size);
  const missingSize = Math.round(missing / total * size);
  const doneSize = size - outdatedSize - missingSize;
  const getBlocks = (size2, type) => {
    const items = [];
    for (let i = 0; i < size2; i++) {
      items.push(html`<div class="${type}-bar"></div>`);
    }
    return items;
  };
  return html`
		<div class="progress-bar" aria-hidden="true">
			${getBlocks(doneSize, "done")} ${getBlocks(outdatedSize, "outdated")}
			${getBlocks(missingSize, "missing")}
		</div>
	`;
};

const DashboardUiSchema = z.object({
  /** The BCP-47 tag of the dashboard's UI, used as the page's `lang` attribute, e.g. `'en'` or `'pt-BR'` */
  lang: z.string().default("en").describe(
    "The BCP-47 tag of the dashboard's UI, used as the page's `lang` attribute, e.g. `'en'` or `'pt-BR'`"
  ),
  /** The directionality of the page's text, used as the page's `dir` attribute. It can be either `'ltr'` (left-to-right) or `'rtl'` (right-to-left) */
  dir: z.literal("ltr").or(z.literal("rtl")).default("ltr").describe(
    "The directionality of the page's text, used as the page's `dir` attribute. It can be either `'ltr'` (left-to-right) or `'rtl'` (right-to-left)"
  ),
  /** The dashboard status of 'done' */
  "status.done": z.string().default("done").describe("The dashboard status of 'done'"),
  /** The dashboard status of 'outdated' */
  "status.outdated": z.string().default("outdated").describe("The dashboard status of 'outdated'"),
  /** The dashboard status 'missing' */
  "status.missing": z.string().default("missing").describe("The dashboard status 'missing'"),
  /** The dashboard status emoji for 'done' */
  "status.emojiDone": z.string().default("\u2714").describe("The dashboard status emoji for 'done'"),
  /** The dashboard status emoji for 'outdated' */
  "status.emojiOutdated": z.string().default("\u{1F504}").describe("The dashboard status emoji for 'outdated'"),
  /** The dashboard status emoji for 'missing' */
  "status.emojiMissing": z.string().default("\u274C").describe("The dashboard status emoji for 'missing'"),
  /** The heading text that precedes the dropdown lists of each locale's individual progress */
  "statusByLocale.heading": z.string().default("Localization progress by locale").describe(
    "The heading text that precedes the dropdown lists of each locale's individual progress"
  ),
  /** The locale's individual status details summary format. The '{*_amount}' and `{*_word}`
   * are placeholder values for the amount of files (e.g. '10') in the status and the status word
   * (e.g. 'done'), respectively.  */
  "statusByLocale.detailsSummaryFormat": z.string().default(
    "{done_amount} {done_word}, {outdated_amount} {outdated_word}, {missing_amount} {missing_word}"
  ).describe(
    "The locale's individual status details summary format. The '{*_amount}' and `{*_word}` are placeholder values for the amount of files (e.g. '10') in the status and the status word (e.g. 'done'), respectively"
  ),
  /** The locale's details title format. The `{locale_name} and `{locale_tag}` are placeholder values
   *  for the locale's name (e.g. English) and the locale's BCP-47 tag (e.g. en), respectively.  */
  "statusByLocale.detailsTitleFormat": z.string().default("{locale_name} ({locale_tag})").describe(
    "The locale's details title format. The `{locale_name} and `{locale_tag}` are placeholder valuesfor the locale's name (e.g. English) and the locale's BCP-47 tag (e.g. en), respectively"
  ),
  /** The text for the locale's details oudated localization link */
  "statusByLocale.outdatedLocalizationLink": z.string().default("outdated localization").describe("The text for the locale's details oudated localization link"),
  /** The text for the locale's details incomplete localization link */
  "statusByLocale.incompleteLocalizationLink": z.string().default("incomplete localization").describe("The text for the locale's details incomplete localization link"),
  /** The text for the locale's details create file link */
  "statusByLocale.createFileLink": z.string().default("Create file").describe("The text for the locale's details create file link"),
  /** The text for the locale's details source change history link */
  "statusByLocale.sourceChangeHistoryLink": z.string().default("source change history").describe("The text for the locale's details source change history link"),
  /** The text for the locale's details UI dictionary missing keys heading */
  "statusByLocale.missingKeys": z.string().default("Missing keys").describe("The text for the locale's details UI dictionary missing keys heading"),
  /** The text shown in the locale's details when it is complete */
  "statusByLocale.completeLocalization": z.string().default("This localization is complete, amazing job! \u{1F389}").describe("The text shown in the locale's details when it is complete"),
  /** The heading text that precedes the table with all locale's status by file */
  "statusByFile.heading": z.string().default("Localization status by file").describe("The heading text that precedes the table with all locale's status by file"),
  /** The text for the status dashboard table's 'file' row head */
  "statusByFile.tableRowFile": z.string().default("File").describe("The text for the status dashboard table's 'file' row head"),
  /** The dashboard table's summary format. The `{*_emoji}` and `{*_word}` are placeholder values for the status emoji (e.g. '❌') and its word (e.g. 'missing') */
  "statusByFile.tableSummaryFormat": z.string().default(
    "{missing_emoji} {missing_word} &nbsp; {outdated_emoji} {outdated_word} &nbsp; {done_emoji} {done_word}"
  ).describe(
    "The dashboard table's summary format. The `{*_emoji}` and `{*_word}` are placeholder values for the status emoji (e.g. '\u274C') and its word (e.g. 'missing')"
  )
}).default({});
const DashboardSchema = z.object({
  /** The title of your localization dashboard, used as both the main heading and meta title of the page */
  title: z.string().default("Localization Status").describe(
    "The title of your localization dashboard, used as both the main heading and meta title of the page"
  ),
  /** The description of your localization dashboard, used in the meta tags of the page */
  description: z.string().default("Online localization status dashboard of the project ").describe(
    "The description of your localization dashboard, used in the meta tags of the page"
  ),
  /** The deployed URL of your localization dashboard, used in the meta tags of the page */
  site: z.string().url().optional().describe(
    "The deployed URL of your localization dashboard, used in the meta tags of the page"
  ),
  /** Array of path bases to hide from the rendered dashboard links */
  basesToHide: z.array(z.string()).optional().describe("Array of path bases to hide from the rendered dashboard links"),
  /** Array of relative paths to CSS files to be inlined into the dashboard */
  customCss: z.array(z.string()).optional().refine(
    (paths) => paths ? paths.every((path) => isRelative(path) && extname(path) === ".css") : true,
    {
      message: "All `customCss` paths should be relative and point to a `.css` file"
    }
  ).describe("Array of relative paths to CSS files to be inlined into the dashboard"),
  /** The favicon(s) to be used by your dashboard */
  favicon: z.object({
    /* Array of the external favicon(s) to be used */
    external: z.array(
      z.object({
        /* The URL of the external favicon asset */
        link: z.string().url().describe("The URL of the external favicon asset"),
        /* The type attribute of the favicon, e.g. `"image/x-icon"`' */
        type: z.string().describe(
          'The type attribute of the favicon, e.g. `"image/x-icon"` or `"image/svg+xml"`'
        )
      })
    ).nonempty().optional().describe("Array of the external favicon(s) to be used"),
    /* Path to an SVG to be inlined into the dashboard.  */
    inline: z.string().refine((path) => isRelative(path) && extname(path) === ".svg", {
      message: "The `favicon.inline` path should be relative and point to a valid `.svg` file"
    }).optional().describe("Path to an SVG to be inlined into the dashboard")
  }).optional().refine((props) => !props || props?.external || props?.inline, {
    message: "The `favicon` object needs to receive either a valid `inline` or `external` property"
  }).describe("The favicon(s) to be used by your dashboard"),
  /** UI dictionary of the dashboard, including the desired `lang` and `dir` attributes of the page */
  ui: DashboardUiSchema.describe(
    "UI dictionary of the dashboard, including the desired `lang` and `dir` attributes of the page"
  )
}).default({});

function html(strings, ...values) {
  const treatedValues = values.map((value) => Array.isArray(value) ? value.join("") : value);
  return String.raw({ raw: strings }, ...treatedValues);
}
async function generateDashboard(config, rendererConfig, status) {
  return Page(config, rendererConfig, status);
}

export { Body as B, ContentDetailsLinks as C, DashboardSchema as D, EmojiFileLink as E, Favicon as F, LocaleDetails as L, Meta as M, OutdatedFiles as O, Page as P, StatusByLocale as S, TableBody as T, StatusByFile as a, TableContentStatus as b, Link as c, CreateFileLink as d, ProgressBar as e, generateDashboard as g, html as h };
