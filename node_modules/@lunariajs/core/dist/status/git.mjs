import { existsSync, rmSync } from 'node:fs';
import os from 'node:os';
import { resolve } from 'node:path';
import { simpleGit } from 'simple-git';
import { info, error } from '../cli/console.mjs';
import { c as cleanJoinURL } from '../shared/core.492ac407.mjs';
import '@clack/core';
import 'picocolors';
import 'jiti';
import 'ufo';

const git = simpleGit({
  maxConcurrentProcesses: Math.max(2, Math.min(32, os.cpus().length))
});
async function handleShallowRepo({ cloneDir, repository }) {
  const gitHostingLinks = getGitHostingLinks(repository);
  const isShallowRepo = await git.revparse(["--is-shallow-repository"]) === "true";
  if (isShallowRepo) {
    console.log(
      info(
        "Shallow repository detected. A clone of your repository's history will be downloaded and used. "
      )
    );
    const target = resolve(cloneDir);
    if (existsSync(target))
      rmSync(target, { recursive: true, force: true });
    await git.clone(gitHostingLinks.clone(), target, ["--bare", "--filter=blob:none"]);
    await git.cwd({ path: target, root: true });
  }
  return isShallowRepo;
}
async function getFileHistory(path) {
  try {
    const log = await git.log({
      file: path,
      strictDate: true
    });
    return {
      latest: log.latest,
      all: log.all
    };
  } catch (e) {
    error("Failed to find commits. Have you made any commits in your branch yet?");
    process.exit(1);
  }
}
function getGitHostingLinks(repository) {
  const { name, branch, hosting, rootDir } = repository;
  switch (hosting) {
    case "github":
      return {
        create: (filePath) => `https://github.com/${name}/new/${branch}?filename=${cleanJoinURL(rootDir, filePath)}`,
        source: (filePath) => `https://github.com/${name}/blob/${branch}/${cleanJoinURL(rootDir, filePath)}`,
        history: (filePath, sinceDate) => `https://github.com/${name}/commits/${branch}/${cleanJoinURL(rootDir, filePath)}${sinceDate ? `?since=${sinceDate}` : ""}`,
        clone: () => `https://github.com/${name}.git`
      };
    case "gitlab":
      return {
        create: (filePath) => `https://gitlab.com/${name}/-/new/${branch}?file_name=${cleanJoinURL(rootDir, filePath)}`,
        source: (filePath) => `https://gitlab.com/${name}/-/blob/${branch}/${cleanJoinURL(rootDir, filePath)}`,
        history: (filePath, sinceDate) => `https://gitlab.com/${name}/-/commits/${branch}/${cleanJoinURL(rootDir, filePath)}${sinceDate ? `?since=${sinceDate}` : ""}`,
        clone: () => `https://gitlab.com/${name}.git`
      };
  }
}

export { getFileHistory, getGitHostingLinks, git, handleShallowRepo };
